{"metadata":{"roleHeading":"Protocol","navigatorTitle":[{"text":"SPSpecificationCombinable","kind":"identifier"}],"role":"symbol","symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPSpecificationCombinable","kind":"identifier"}],"externalID":"s:20SpecificationPattern25SPSpecificationCombinableP","modules":[{"name":"SpecificationPattern"}],"title":"SPSpecificationCombinable"},"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable","interfaceLanguage":"swift"},"relationshipsSections":[{"kind":"relationships","title":"Inherited By","identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable"],"type":"inheritedBy"},{"kind":"relationships","title":"Conforming Types","identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/Specification"],"type":"conformingTypes"}],"abstract":[{"type":"text","text":"Declares combinatorial operations that defines specification pattern."}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPSpecificationCombinable","kind":"identifier"}]}]},{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conform to the "},{"type":"reference","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable","isActive":true},{"type":"text","text":" protocol to inherit the necessary"},{"type":"text","text":" "},{"type":"text","text":"methods to work with other specifications."}]},{"type":"heading","level":2,"text":"Mathematical Foundation","anchor":"Mathematical-Foundation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Specifications form a Boolean algebra with:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Identity elements: ","type":"text"},{"code":"all","type":"codeVoice"},{"type":"text","text":" (true) and "},{"type":"codeVoice","code":"none"},{"type":"text","text":" (false)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Binary operations: "},{"type":"codeVoice","code":"and"},{"type":"text","text":" (∧) and "},{"code":"or","type":"codeVoice"},{"text":" (∨)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Unary operation: ","type":"text"},{"type":"codeVoice","code":"not"},{"text":" (¬)","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Laws: commutativity, associativity, distributivity, etc."}]}]}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/specificationpattern\/spspecificationcombinable"]}],"topicSections":[{"identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/and(_:)","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/not()","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/or(_:)"],"anchor":"Instance-Methods","generated":true,"title":"Instance Methods"},{"identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/all","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/none"],"anchor":"Type-Properties","generated":true,"title":"Type Properties"}],"sections":[],"references":{"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/or(_:)":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/or(_:)","required":true,"abstract":[{"text":"Combines self with the given specification using the ","type":"text"},{"code":"OR","type":"codeVoice"},{"text":" operation.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Returns a new specification object that is satisfied when EITHER or BOTH are satisfied."}],"kind":"symbol","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/or(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"or"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic","title":"or(_:)"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/not()":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/not()","required":true,"abstract":[{"type":"text","text":"Negates self."},{"type":"text","text":" "},{"type":"text","text":"Returns a new specification that is satisfied when self is not."}],"kind":"symbol","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/not()","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"not"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Self"}],"type":"topic","title":"not()"},"doc://SpecificationPattern/documentation/SpecificationPattern/Specification":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Specification","kind":"identifier"}],"navigatorTitle":[{"text":"Specification","kind":"identifier"}],"title":"Specification","type":"topic","kind":"symbol","url":"\/documentation\/specificationpattern\/specification","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/Specification","role":"symbol","abstract":[{"type":"text","text":"Generic implementation of the specification design pattern."}]},"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SPOptionalSPSpecificationCombinable"}],"type":"topic","title":"SPOptionalSPSpecificationCombinable","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable","url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Set of additional operations to support conditional composition with optional values."}]},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/and(_:)":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/and(_:)","required":true,"abstract":[{"text":"Combines self with the given specification using the ","type":"text"},{"code":"AND","type":"codeVoice"},{"text":" operation.","type":"text"},{"text":" ","type":"text"},{"text":"Returns a new specification object that is satisfied when BOTH are satisfied.","type":"text"}],"kind":"symbol","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/and(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"and"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"type":"topic","title":"and(_:)"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/all":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/all","required":true,"abstract":[{"type":"text","text":"Identity element for "},{"type":"codeVoice","code":"AND"},{"type":"text","text":" operations (specification that always satisfy)."}],"kind":"symbol","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/all","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"all","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic","title":"all"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/none":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/none","required":true,"abstract":[{"type":"text","text":"Identity element for "},{"type":"codeVoice","code":"OR"},{"type":"text","text":" operations (specification that never satisfy)."}],"kind":"symbol","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/none","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"none","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic","title":"none"},"doc://SpecificationPattern/documentation/SpecificationPattern":{"kind":"symbol","abstract":[],"url":"\/documentation\/specificationpattern","role":"collection","type":"topic","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern","title":"SpecificationPattern"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable":{"abstract":[{"text":"Declares combinatorial operations that defines specification pattern.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPSpecificationCombinable","kind":"identifier"}],"title":"SPSpecificationCombinable","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable","role":"symbol","navigatorTitle":[{"text":"SPSpecificationCombinable","kind":"identifier"}],"type":"topic","url":"\/documentation\/specificationpattern\/spspecificationcombinable"}}}