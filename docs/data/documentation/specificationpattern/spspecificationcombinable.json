{"variants":[{"paths":["\/documentation\/specificationpattern\/spspecificationcombinable"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","sections":[],"abstract":[{"text":"Declares combinatorial operations that defines specification pattern.","type":"text"}],"topicSections":[{"title":"Instance Methods","generated":true,"anchor":"Instance-Methods","identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/and(_:)","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/not()","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/or(_:)"]},{"generated":true,"identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/all","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/none"],"title":"Type Properties","anchor":"Type-Properties"}],"hierarchy":{"paths":[["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern"]]},"identifier":{"url":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SPSpecificationCombinable"}],"symbolKind":"protocol","navigatorTitle":[{"kind":"identifier","text":"SPSpecificationCombinable"}],"role":"symbol","title":"SPSpecificationCombinable","roleHeading":"Protocol","externalID":"s:20SpecificationPattern25SPSpecificationCombinableP","modules":[{"name":"SpecificationPattern"}]},"relationshipsSections":[{"kind":"relationships","title":"Inherited By","identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable"],"type":"inheritedBy"},{"kind":"relationships","identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/Specification"],"type":"conformingTypes","title":"Conforming Types"}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPSpecificationCombinable","kind":"identifier"}],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"Conform to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable"},{"text":" protocol to inherit the necessary","type":"text"},{"type":"text","text":" "},{"text":"methods to work with other specifications.","type":"text"}],"type":"paragraph"},{"text":"Mathematical Foundation","type":"heading","anchor":"Mathematical-Foundation","level":2},{"inlineContent":[{"text":"Specifications form a Boolean algebra with:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Identity elements: "},{"type":"codeVoice","code":"all"},{"type":"text","text":" (true) and "},{"type":"codeVoice","code":"none"},{"type":"text","text":" (false)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Binary operations: "},{"code":"and","type":"codeVoice"},{"type":"text","text":" (∧) and "},{"code":"or","type":"codeVoice"},{"type":"text","text":" (∨)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unary operation: "},{"code":"not","type":"codeVoice"},{"type":"text","text":" (¬)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Laws: commutativity, associativity, distributivity, etc.","type":"text"}]}]}],"type":"unorderedList"}]}],"references":{"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/or(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"or"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"title":"or(_:)","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/or(_:)","kind":"symbol","abstract":[{"text":"Combines self with the given specification using the ","type":"text"},{"code":"OR","type":"codeVoice"},{"text":" operation.","type":"text"},{"text":" ","type":"text"},{"text":"Returns a new specification object that is satisfied when EITHER or BOTH are satisfied.","type":"text"}],"required":true,"type":"topic","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/or(_:)","role":"symbol"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable":{"url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable","abstract":[{"type":"text","text":"Set of additional operations to support conditional composition with optional values."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable","role":"symbol","navigatorTitle":[{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"}],"type":"topic","title":"SPOptionalSPSpecificationCombinable"},"doc://SpecificationPattern/documentation/SpecificationPattern/Specification":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/Specification","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Specification"}],"url":"\/documentation\/specificationpattern\/specification","title":"Specification","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Specification"}],"abstract":[{"type":"text","text":"Generic implementation of the specification design pattern."}]},"doc://SpecificationPattern/documentation/SpecificationPattern":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern","kind":"symbol","url":"\/documentation\/specificationpattern","title":"SpecificationPattern","role":"collection","type":"topic","abstract":[]},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/not()":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"not"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Self"}],"required":true,"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/not()","title":"not()","abstract":[{"type":"text","text":"Negates self."},{"type":"text","text":" "},{"type":"text","text":"Returns a new specification that is satisfied when self is not."}],"role":"symbol","kind":"symbol","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/not()"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable","url":"\/documentation\/specificationpattern\/spspecificationcombinable","navigatorTitle":[{"text":"SPSpecificationCombinable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPSpecificationCombinable","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Declares combinatorial operations that defines specification pattern."}],"title":"SPSpecificationCombinable","type":"topic","role":"symbol"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/none":{"required":true,"type":"topic","abstract":[{"text":"Identity element for ","type":"text"},{"type":"codeVoice","code":"OR"},{"type":"text","text":" operations (specification that never satisfy)."}],"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/none","role":"symbol","title":"none","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/none","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"none"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/all":{"title":"all","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/all","role":"symbol","abstract":[{"type":"text","text":"Identity element for "},{"type":"codeVoice","code":"AND"},{"type":"text","text":" operations (specification that always satisfy)."}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"all","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"required":true,"type":"topic","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/all","kind":"symbol"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/and(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"and","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"title":"and(_:)","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/and(_:)","kind":"symbol","abstract":[{"type":"text","text":"Combines self with the given specification using the "},{"type":"codeVoice","code":"AND"},{"type":"text","text":" operation."},{"type":"text","text":" "},{"type":"text","text":"Returns a new specification object that is satisfied when BOTH are satisfied."}],"required":true,"type":"topic","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/and(_:)","role":"symbol"}}}