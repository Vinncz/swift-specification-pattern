{"abstract":[{"type":"text","text":"Declares combinatorial operations that defines specification pattern."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/specificationpattern\/spspecificationcombinable"]}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"role":"symbol","title":"SPSpecificationCombinable","modules":[{"name":"SpecificationPattern"}],"roleHeading":"Protocol","symbolKind":"protocol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SPSpecificationCombinable"}],"navigatorTitle":[{"kind":"identifier","text":"SPSpecificationCombinable"}],"externalID":"s:20SpecificationPattern25SPSpecificationCombinableP"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern"]]},"topicSections":[{"anchor":"Instance-Methods","title":"Instance Methods","generated":true,"identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/and(_:)","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/not()","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/or(_:)"]},{"anchor":"Type-Properties","title":"Type Properties","generated":true,"identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/all","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/none"]}],"relationshipsSections":[{"kind":"relationships","title":"Inherited By","type":"inheritedBy","identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable"]},{"kind":"relationships","title":"Conforming Types","type":"conformingTypes","identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/Specification"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPSpecificationCombinable","kind":"identifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conform to the "},{"type":"reference","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable","isActive":true},{"type":"text","text":" protocol to inherit the necessary"},{"type":"text","text":" "},{"type":"text","text":"methods to work with other specifications."}]},{"type":"heading","anchor":"Mathematical-Foundation","text":"Mathematical Foundation","level":2},{"type":"paragraph","inlineContent":[{"text":"Specifications form a Boolean algebra with:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identity elements: "},{"code":"all","type":"codeVoice"},{"type":"text","text":" (true) and "},{"code":"none","type":"codeVoice"},{"type":"text","text":" (false)"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Binary operations: "},{"code":"and","type":"codeVoice"},{"type":"text","text":" (∧) and "},{"code":"or","type":"codeVoice"},{"type":"text","text":" (∨)"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Unary operation: ","type":"text"},{"code":"not","type":"codeVoice"},{"text":" (¬)","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Laws: commutativity, associativity, distributivity, etc.","type":"text"}],"type":"paragraph"}]}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable"},"references":{"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable":{"url":"\/documentation\/specificationpattern\/spspecificationcombinable","kind":"symbol","title":"SPSpecificationCombinable","navigatorTitle":[{"kind":"identifier","text":"SPSpecificationCombinable"}],"abstract":[{"type":"text","text":"Declares combinatorial operations that defines specification pattern."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPSpecificationCombinable","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable"},"doc://SpecificationPattern/documentation/SpecificationPattern/Specification":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Specification"}],"role":"symbol","title":"Specification","url":"\/documentation\/specificationpattern\/specification","abstract":[{"type":"text","text":"Generic implementation of the specification design pattern."}],"navigatorTitle":[{"kind":"identifier","text":"Specification"}],"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/Specification","kind":"symbol"},"doc://SpecificationPattern/documentation/SpecificationPattern":{"kind":"symbol","url":"\/documentation\/specificationpattern","role":"collection","type":"topic","abstract":[],"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern","title":"SpecificationPattern"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/and(_:)":{"role":"symbol","abstract":[{"type":"text","text":"Combines self with the given specification using the "},{"code":"AND","type":"codeVoice"},{"text":" operation.","type":"text"},{"text":" ","type":"text"},{"text":"Returns a new specification object that is satisfied when BOTH are satisfied.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"and"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol","required":true,"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/and(_:)","title":"and(_:)","type":"topic","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/and(_:)"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/none":{"type":"topic","abstract":[{"text":"Identity element for ","type":"text"},{"type":"codeVoice","code":"OR"},{"type":"text","text":" operations (specification that never satisfy)."}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"none","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/none","title":"none","required":true,"kind":"symbol","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/none","role":"symbol"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/or(_:)":{"abstract":[{"text":"Combines self with the given specification using the ","type":"text"},{"type":"codeVoice","code":"OR"},{"type":"text","text":" operation."},{"type":"text","text":" "},{"type":"text","text":"Returns a new specification object that is satisfied when EITHER or BOTH are satisfied."}],"kind":"symbol","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/or(_:)","title":"or(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"or"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"type":"topic","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/or(_:)","role":"symbol","required":true},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/all":{"role":"symbol","abstract":[{"text":"Identity element for ","type":"text"},{"type":"codeVoice","code":"AND"},{"type":"text","text":" operations (specification that always satisfy)."}],"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"all"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol","required":true,"type":"topic","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/all","title":"all","url":"\/documentation\/specificationpattern\/spspecificationcombinable\/all"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable/not()":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"not","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"role":"symbol","title":"not()","abstract":[{"type":"text","text":"Negates self."},{"type":"text","text":" "},{"type":"text","text":"Returns a new specification that is satisfied when self is not."}],"url":"\/documentation\/specificationpattern\/spspecificationcombinable\/not()","required":true,"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable\/not()","kind":"symbol"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable","title":"SPOptionalSPSpecificationCombinable","kind":"symbol","type":"topic","url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SPOptionalSPSpecificationCombinable"}],"abstract":[{"text":"Set of additional operations to support conditional composition with optional values.","type":"text"}],"role":"symbol"}}}