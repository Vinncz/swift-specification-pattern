{"identifier":{"url":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable","interfaceLanguage":"swift"},"schemaVersion":{"patch":0,"major":0,"minor":3},"topicSections":[{"title":"Instance Methods","identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfNotEmpty(_:applyAndBetween:)","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfNotEmpty(_:applyOrBetween:)","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfPresent(_:_:)"],"generated":true,"anchor":"Instance-Methods"}],"sections":[],"kind":"symbol","abstract":[{"text":"Set of additional operations to support conditional composition with optional values.","type":"text"}],"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable"],"title":"Inherits From","type":"inheritsFrom"},{"kind":"relationships","identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/Specification"],"title":"Conforming Types","type":"conformingTypes"}],"metadata":{"navigatorTitle":[{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"}],"symbolKind":"protocol","externalID":"s:20SpecificationPattern35SPOptionalSPSpecificationCombinableP","title":"SPOptionalSPSpecificationCombinable","role":"symbol","roleHeading":"Protocol","modules":[{"name":"SpecificationPattern"}]},"hierarchy":{"paths":[["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern"]]},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable","kind":"typeIdentifier","text":"SPSpecificationCombinable","preciseIdentifier":"s:20SpecificationPattern25SPSpecificationCombinableP"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Conform to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable"},{"text":" to inherit the necessary","type":"text"},{"text":" ","type":"text"},{"text":"methods and implementations, that are especially useful while working with optionals;","type":"text"},{"text":" ","type":"text"},{"text":"either nil values, or an empty array.","type":"text"}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/specificationpattern\/spoptionalspspecificationcombinable"]}],"references":{"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable/andIfNotEmpty(_:applyAndBetween:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"andIfNotEmpty","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">([","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"kind":"externalParam","text":"applyAndBetween"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable\/andifnotempty(_:applyandbetween:)","required":true,"type":"topic","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfNotEmpty(_:applyAndBetween:)","abstract":[{"type":"text","text":"Evaluates each element against the builder, applies "},{"code":"AND","type":"codeVoice"},{"text":" between the results,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"codeVoice","code":"AND"},{"text":"s them with self. Returns self unaltered otherwise.","type":"text"}],"role":"symbol","defaultImplementations":1,"title":"andIfNotEmpty(_:applyAndBetween:)","kind":"symbol"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable/andIfNotEmpty(_:applyOrBetween:)":{"required":true,"type":"topic","abstract":[{"text":"Evaluates each element against the builder, applies ","type":"text"},{"code":"OR","type":"codeVoice"},{"text":" between the results,","type":"text"},{"text":" ","type":"text"},{"text":"then ","type":"text"},{"code":"AND","type":"codeVoice"},{"text":"s them with self. Returns self unaltered otherwise.","type":"text"}],"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfNotEmpty(_:applyOrBetween:)","role":"symbol","defaultImplementations":1,"title":"andIfNotEmpty(_:applyOrBetween:)","url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable\/andifnotempty(_:applyorbetween:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"andIfNotEmpty"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(["},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"applyOrBetween"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"kind":"symbol"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable":{"url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable","abstract":[{"type":"text","text":"Set of additional operations to support conditional composition with optional values."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable","role":"symbol","navigatorTitle":[{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"}],"type":"topic","title":"SPOptionalSPSpecificationCombinable"},"doc://SpecificationPattern/documentation/SpecificationPattern":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern","kind":"symbol","url":"\/documentation\/specificationpattern","title":"SpecificationPattern","role":"collection","type":"topic","abstract":[]},"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable/andIfPresent(_:_:)":{"defaultImplementations":1,"kind":"symbol","abstract":[{"code":"AND","type":"codeVoice"},{"type":"text","text":"s self and the given specification if the value is present,"},{"type":"text","text":" "},{"type":"text","text":"return self unaltered otherwise."}],"type":"topic","url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable\/andifpresent(_:_:)","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfPresent(_:_:)","title":"andIfPresent(_:_:)","required":true,"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"andIfPresent","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?, (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://SpecificationPattern/documentation/SpecificationPattern/Specification":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/Specification","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Specification"}],"url":"\/documentation\/specificationpattern\/specification","title":"Specification","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Specification"}],"abstract":[{"type":"text","text":"Generic implementation of the specification design pattern."}]},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable","url":"\/documentation\/specificationpattern\/spspecificationcombinable","navigatorTitle":[{"text":"SPSpecificationCombinable","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPSpecificationCombinable","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Declares combinatorial operations that defines specification pattern."}],"title":"SPSpecificationCombinable","type":"topic","role":"symbol"}}}