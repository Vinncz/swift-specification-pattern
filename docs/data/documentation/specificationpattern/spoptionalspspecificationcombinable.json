{"variants":[{"paths":["\/documentation\/specificationpattern\/spoptionalspspecificationcombinable"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"type":"inheritsFrom","title":"Inherits From","identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable"],"kind":"relationships"},{"type":"conformingTypes","title":"Conforming Types","kind":"relationships","identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/Specification"]}],"topicSections":[{"title":"Instance Methods","generated":true,"identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfNotEmpty(_:applyAndBetween:)","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfNotEmpty(_:applyOrBetween:)","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfPresent(_:_:)"],"anchor":"Instance-Methods"}],"abstract":[{"type":"text","text":"Set of additional operations to support conditional composition with optional values."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:20SpecificationPattern25SPSpecificationCombinableP","kind":"typeIdentifier","text":"SPSpecificationCombinable","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"inlineContent":[{"text":"Conform to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable","type":"reference"},{"text":" to inherit the necessary","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"methods and implementations, that are especially useful while working with optionals;"},{"type":"text","text":" "},{"type":"text","text":"either nil values, or an empty array."}],"type":"paragraph"}]}],"sections":[],"metadata":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"}],"role":"symbol","symbolKind":"protocol","title":"SPOptionalSPSpecificationCombinable","roleHeading":"Protocol","modules":[{"name":"SpecificationPattern"}],"externalID":"s:20SpecificationPattern35SPOptionalSPSpecificationCombinableP","navigatorTitle":[{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"}]},"identifier":{"url":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://SpecificationPattern/documentation/SpecificationPattern/Specification":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Specification"}],"role":"symbol","title":"Specification","url":"\/documentation\/specificationpattern\/specification","abstract":[{"type":"text","text":"Generic implementation of the specification design pattern."}],"navigatorTitle":[{"kind":"identifier","text":"Specification"}],"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/Specification","kind":"symbol"},"doc://SpecificationPattern/documentation/SpecificationPattern":{"kind":"symbol","url":"\/documentation\/specificationpattern","role":"collection","type":"topic","abstract":[],"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern","title":"SpecificationPattern"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable/andIfPresent(_:_:)":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"andIfPresent","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?, (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"role":"symbol","title":"andIfPresent(_:_:)","url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable\/andifpresent(_:_:)","abstract":[{"code":"AND","type":"codeVoice"},{"type":"text","text":"s self and the given specification if the value is present,"},{"type":"text","text":" "},{"type":"text","text":"return self unaltered otherwise."}],"required":true,"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfPresent(_:_:)","kind":"symbol","defaultImplementations":1},"doc://SpecificationPattern/documentation/SpecificationPattern/SPSpecificationCombinable":{"url":"\/documentation\/specificationpattern\/spspecificationcombinable","kind":"symbol","title":"SPSpecificationCombinable","navigatorTitle":[{"kind":"identifier","text":"SPSpecificationCombinable"}],"abstract":[{"type":"text","text":"Declares combinatorial operations that defines specification pattern."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPSpecificationCombinable","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPSpecificationCombinable"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable":{"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable","title":"SPOptionalSPSpecificationCombinable","kind":"symbol","type":"topic","url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SPOptionalSPSpecificationCombinable"}],"abstract":[{"text":"Set of additional operations to support conditional composition with optional values.","type":"text"}],"role":"symbol"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable/andIfNotEmpty(_:applyOrBetween:)":{"abstract":[{"type":"text","text":"Evaluates each element against the builder, applies "},{"type":"codeVoice","code":"OR"},{"type":"text","text":" between the results,"},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"codeVoice","code":"AND"},{"type":"text","text":"s them with self. Returns self unaltered otherwise."}],"url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable\/andifnotempty(_:applyorbetween:)","kind":"symbol","title":"andIfNotEmpty(_:applyOrBetween:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"andIfNotEmpty"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">([","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"applyOrBetween","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic","defaultImplementations":1,"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfNotEmpty(_:applyOrBetween:)","role":"symbol","required":true},"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable/andIfNotEmpty(_:applyAndBetween:)":{"abstract":[{"text":"Evaluates each element against the builder, applies ","type":"text"},{"code":"AND","type":"codeVoice"},{"type":"text","text":" between the results,"},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"codeVoice","code":"AND"},{"type":"text","text":"s them with self. Returns self unaltered otherwise."}],"url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable\/andifnotempty(_:applyandbetween:)","kind":"symbol","title":"andIfNotEmpty(_:applyAndBetween:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"andIfNotEmpty","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(["},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"applyAndBetween"},{"kind":"text","text":": ("},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic","defaultImplementations":1,"identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfNotEmpty(_:applyAndBetween:)","role":"symbol","required":true}}}