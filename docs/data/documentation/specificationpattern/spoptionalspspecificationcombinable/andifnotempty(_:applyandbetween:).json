{"abstract":[{"type":"text","text":"Evaluates each element against the builder, applies "},{"type":"codeVoice","code":"AND"},{"type":"text","text":" between the results,"},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"codeVoice","code":"AND"},{"type":"text","text":"s them with self. Returns self unaltered otherwise."}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"andIfNotEmpty","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"values","kind":"internalParam"},{"text":": [","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"applyAndBetween","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"builder","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Usage Example","anchor":"Usage-Example"},{"type":"codeListing","code":["var preloadedSoftwares: [Software] = [.office, .browser]","","\/\/ query computers that have BOTH `.office` AND `.browser` preinstalled.","\/\/ or, query ALL computers if empty.","let spec = ComputerSpecification.all","  .andIfNotEmpty(preloadedSoftwares, applyAndBetween: { software","    ComputerSpecification.hasPreloadedSoftware(software)","  })"],"syntax":"swift"}]}],"metadata":{"role":"symbol","externalID":"s:20SpecificationPattern35SPOptionalSPSpecificationCombinableP13andIfNotEmpty_15applyAndBetweenxSayqd__G_xqd__XEtlF","symbolKind":"method","title":"andIfNotEmpty(_:applyAndBetween:)","modules":[{"name":"SpecificationPattern"}],"required":true,"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"andIfNotEmpty"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(["},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"applyAndBetween"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}]},"identifier":{"url":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfNotEmpty(_:applyAndBetween:)","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern","doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable"]]},"defaultImplementationsSections":[{"identifiers":["doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfNotEmpty(_:applyAndBetween:)-3txvr"],"anchor":"SPOptionalSPSpecificationCombinable-Implementations","title":"SPOptionalSPSpecificationCombinable Implementations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/specificationpattern\/spoptionalspspecificationcombinable\/andifnotempty(_:applyandbetween:)"]}],"references":{"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable/andIfNotEmpty(_:applyAndBetween:)-3txvr":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"andIfNotEmpty","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">(["},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"], "},{"kind":"externalParam","text":"applyAndBetween"},{"text":": (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"type":"topic","title":"andIfNotEmpty(_:applyAndBetween:)","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfNotEmpty(_:applyAndBetween:)-3txvr","url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable\/andifnotempty(_:applyandbetween:)-3txvr","kind":"symbol","role":"symbol","abstract":[]},"doc://SpecificationPattern/documentation/SpecificationPattern":{"kind":"symbol","abstract":[],"url":"\/documentation\/specificationpattern","role":"collection","type":"topic","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern","title":"SpecificationPattern"},"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable/andIfNotEmpty(_:applyAndBetween:)":{"defaultImplementations":1,"abstract":[{"type":"text","text":"Evaluates each element against the builder, applies "},{"type":"codeVoice","code":"AND"},{"type":"text","text":" between the results,"},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"codeVoice","code":"AND"},{"type":"text","text":"s them with self. Returns self unaltered otherwise."}],"role":"symbol","url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable\/andifnotempty(_:applyandbetween:)","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable\/andIfNotEmpty(_:applyAndBetween:)","title":"andIfNotEmpty(_:applyAndBetween:)","kind":"symbol","type":"topic","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"andIfNotEmpty","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">([","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"], ","kind":"text"},{"text":"applyAndBetween","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://SpecificationPattern/documentation/SpecificationPattern/SPOptionalSPSpecificationCombinable":{"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"SPOptionalSPSpecificationCombinable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SPOptionalSPSpecificationCombinable"}],"type":"topic","title":"SPOptionalSPSpecificationCombinable","identifier":"doc:\/\/SpecificationPattern\/documentation\/SpecificationPattern\/SPOptionalSPSpecificationCombinable","url":"\/documentation\/specificationpattern\/spoptionalspspecificationcombinable","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Set of additional operations to support conditional composition with optional values."}]}}}